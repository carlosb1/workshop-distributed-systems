//! Message io functions for network communication.
//!
//! It provides two dispatchers as callback functions: `ClientDispatcher` and `ServerDispatcher` to
//! be used with `run_client` and `run_server` functions

use message_io::network::{NetEvent, Transport};
use message_io::node::{self, NodeEvent};

use crate::adapters::network::message::{FromClientMessage, FromServerMessage, Signal};
use crate::entity::Node;

use std::sync::Arc;
use std::sync::Mutex;
use std::time::Duration;

pub trait ServerDispatcher {
    fn dispatch(&mut self, received: FromClientMessage) -> Option<FromServerMessage>;
}
pub trait ClientDispatcher {
    fn dispatch(&mut self, received: FromServerMessage) -> Option<FromClientMessage>;
}

/// Network function for setting up a message-io server.
pub fn run_server<T: ServerDispatcher + Clone>(node: Node, dispatcher: Arc<Mutex<T>>) {
    log::info!("Running server for address {:}", node.address);
    let (handler, listener) = node::split::<()>();
    handler
        .network()
        .listen(Transport::FramedTcp, node.address)
        .unwrap();

    listener.for_each(move |event| match event.network() {
        NetEvent::Connected(_, _) => unreachable!(), // Used for explicit connections.
        NetEvent::Accepted(_endpoint, _listener) => log::info!("Client connected"), // Tcp or Ws
        NetEvent::Message(endpoint, data) => {
            let message: FromClientMessage = bincode::deserialize(&data).unwrap();
            let response_message = dispatcher
                .lock()
                .unwrap()
                .clone()
                .dispatch(message.clone())
                .expect("It could no dispatch message");
            log::info!("response message:{:?}", message);
            let response = bincode::serialize(&response_message).expect("It could not serialize ");
            log::info!("response:{:?}", response);

            handler.network().send(endpoint, &response);
        }
        NetEvent::Disconnected(_endpoint) => log::info!("Client disconnected"), //Tcp or Ws
    });
}

/// Network function for setting up a message-io client.
pub fn run_client<T: ClientDispatcher + Clone>(
    message: FromClientMessage,
    dispatcher: Arc<Mutex<T>>,
) {
    let port = std::env::var("PORT").unwrap_or("3042".to_string());
    let host = std::env::var("HOST").unwrap_or("0.0.0.0".to_string());
    let address = format!("{:}:{:}", host, port);

    let (handler, listener) = node::split();

    let (server, _) = handler
        .network()
        .connect(Transport::FramedTcp, address)
        .unwrap();

    listener.for_each(move |event| match event {
        NodeEvent::Network(net_event) => match net_event {
            NetEvent::Connected(_endpoint, _ok) => handler.signals().send(Signal::Greet),
            NetEvent::Accepted(_, _) => unreachable!(), // Only generated by listening
            NetEvent::Message(_endpoint, data) => {
                let message: FromServerMessage =
                    bincode::deserialize(&data).expect("It could not serialize the data");
                dispatcher.lock().unwrap().clone().dispatch(message.clone());
            }
            NetEvent::Disconnected(_endpoint) => (),
        },
        NodeEvent::Signal(signal) => match signal {
            Signal::Greet => {
                handler
                    .network()
                    .send(server, &bincode::serialize(&message).unwrap());
            }
        },
    });
}
